date: "November 18, 2015"
---

Clear global enviornment
```{r}
rm(list = ls(all.names = TRUE))
```

Retrieve Date and Time
Date will be used to create a new directory
Time will be used to save files into that new directory. (Timestamp)
```{r}
curDate <- Sys.Date()
curDate_Time <- Sys.time()
curTime <- format(Sys.time(), "%I_%M %p")
```


Function to install packages if not installed.
If you create a method that requires a different package along with the ones listed below, simply add a comma followed by "your package name", after "plyr" below.It will automatically test if it is installed and if not will install it.This will keep r from restarting everytime the package is already installed.
```{r}
checkPackage <- function(x){
  for( i in x ){
    #  require returns TRUE invisibly if it was able to load package
    if( ! require( i , character.only = TRUE ) ){
      #  If package was not able to be loaded then re-install
      install.packages( i , dependencies = TRUE )
    }
  }
}

#  Then try/install packages...Insert any more packages that may be needed here
checkPackage( c("ggplot2","psych","corrgram", "plyr", "car", "reshape2") )
```


Function to set directory
```{r}
setDirectory <- function(location){
  currentDirectory <- setwd(location)
}
```

Calling Functions from above.  
Based on the current directory the csv Files will be loaded from there.
```{r}
setDirectory("~/CS 470")
```


This is the code to read all csv files into R. It will create a dataframe for each csv file individually and title that dataframe the file's original name (removing spaces and the .csv).
```{r}
path <- paste0(getwd(), "/")
files <- list.files(path=path, pattern="*.csv")
for(file in files)
{
  #filename before .csv
  csvFileName <- which(strsplit(file, "")[[1]]==".")
  assign(
    #remove spaces from file
    gsub(" ","",substr(file, 1, csvFileName-1)), 
    read.csv(paste(path,file,sep="")))
}
```


Create a subdirectory based on the curDate variable for saving plots.(If today is 4/4/14, then a new folder will be created with that date and any work done on that day will be saved into that folder.)
Will then set current directory to the new direcory created. This way all the data has already been loaded into the global enviornment per the previous directory. Now all new plots will be saved to the new directory.
```{r}
dir.create(file.path(path,curDate), showWarnings = FALSE)
setDirectory(paste(path,curDate,"/",sep = ""))
getwd()
```


This function should return a proper list with all the data.frames as elements.
It also will add each data frame to one large combined data frame.A new column is added to the combDF data to specify which data frame it originated from.This way all data frames can be plotted at once, while also retaining the original data frames to individually plot.
```{r}
dfs <- Filter(function(x) is(x, "data.frame"), mget(ls()))
dfNames <- names(dfs)
for(x in 1: length(dfs)){
  df.name <- dfNames[x]
  print(df.name)
  colnames(dfs[[x]])[1]
  dfs[[x]]$fromDF <- df.name
}
combDF <- do.call(rbind,dfs)
```


```{r}
plotHist<- function(x){
l <- x[[1,6]] #the data stored in the first row of the fromDF column
library(reshape2)
library(ggplot2)
jpeg(paste(l, " IndividualHistograms"," ", curTime,".jpg",sep=""))
d <- melt(x)
hist <- ggplot(d, aes(x=value)) + geom_histogram() + facet_wrap(~variable, scales = "free_x", nrow = 2)
plot(hist)
dev.off()
}
```

Correlation - Plotting columns within one data frame
Positive correlations are displayed in blue and negative correlations in red color. Color intensity and the size of the circle are proportional to the correlation coefficients. 
**Important: Not all data frames will produce an ouput.
```{r}
plotCorrelation <- function(x){
  library(corrgram)
  jpeg(paste("CorrelationPlot_CombDF"," ", curTime,".jpg",sep=""))
  corr <- corrgram(x,order=TRUE, lower.panel=panel.shade,
                   upper.panel=panel.pie, text.panel=panel.txt,
                   main="Combined Data Frame Correlation")
  dev.off()
}
```

Scatter Plot of Data Frames (Individual Plotting)
To add a data frame to the plot:
+ geom_point(data = Your data frame,aes(x=insert x variable,y=insert y variable), color = 'insert color')
```{r}
library(ggplot2)
jpeg(paste("Scatter Plot Area ",curTime,".jpg",sep=""))
ggplot() + ggtitle('Area ScatterPlot_') + geom_point(data = Test1, aes(x=Count,y=Area), color = 'green')+ geom_point(data = Test2,aes(x=Count,y=Area), color = 'blue')+ geom_point(data = Macro3,aes(x=Count,y=Area), color ='red')
dev.off()


#Line Plot of Data Frames (Individual Plotting)
library(ggplot2)
jpeg(paste("Line Plot Area ",curTime,".jpg",sep=""))
ggplot() + ggtitle('Area LinePlot') + geom_line(data = Test1, aes(x=Count,y=Area), color = 'green')+ geom_line(data = Test2,aes(x=Count,y=Area), color = 'blue')+ geom_line(data = Macro3,aes(x=Count,y=Area), color ='red')
dev.off()


#Density Curve of Data Frames (Individual Plotting)

library(ggplot2)
jpeg(paste("Density Curve Area ",curTime,".jpg",sep=""))
ggplot() + ggtitle('Area DensityCurve') + geom_density(data = Test1, aes(Area), color = 'green')+ geom_density(data = Test2,aes(Area), color = 'blue')+ geom_density(data = Macro3,aes(Area), color ='red') 
dev.off()
```


Combined Plots : Plots created using the data frame previously combined of all data frames that were loaded into the global enviornment
```{r}
names(combDF)
t1 <- table(combDF$Count);
t2 <- table(combDF$Area);
t3 <- table(combDF$Mean);
t4 <- table(combDF$Min); 
t5 <- table(combDF$Max); 
t6 <- table(combDF$fromDF); 
jpeg(paste("BarPlots CombDF", curTime, ".jpg", sep = ""), width = 800, height = 600)
par(mfrow=c(2,3))
barplot(t1, main = "Count", col = factor(combDF$fromDF), xlab = "Image ID")
barplot(t2, main = "Area", col = factor(combDF$fromDF), xlab = "Area")
barplot(t3, main = "Mean", col = factor(combDF$fromDF), xlab = "Mean")
barplot(t4, main = "Min", col = factor(combDF$fromDF), xlab = "Min")
barplot(t5, main = "Max", col = factor(combDF$fromDF), xlab = "Max")
barplot(t6, main = "Data Frame", col = factor(combDF$fromDF), xlab = "Data Frame")
dev.off()

# Scatterplot Matrices from the car Package
library(car)
jpeg(paste("combDF Matrices ", curTime, ".jpg", sep=""), width = 800, height = 600)
scatterplot.matrix(~Count+Area+Mean+Min+Max|fromDF, data=combDF,
  	main="ScatterPlot Matrices CombDF")
dev.off()

#Call Correlation Method while passing in combined data 
plotCorrelation(combDF)
```

Call functions and applying dfs (list of data frames) to those functions
```{r}
lapply(dfs, plotHist)
```



