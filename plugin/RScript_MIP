title: "Medical Image Analysis"
author: "Medical Image Processing Group"
date: "October 23, 2015"
output: html_document
description: Will first clear the enviornment and set the directory based on a function. 
Will read all csv files and save them as a data frame. Will take the data frame and alter the 
columns, so that the column names are appended with the data frame. From then on will go through a 
series of functions that will plot the data.
---


Clear global enviornment
```{r}
rm(list = ls(all.names = TRUE))
```


Function to set directory
```{r}
setDirectory <- function(location){
  currentDirectory <- setwd(location)
}
```

Calling Functions from above. 
Calling getwd to return if the directory changed. 
Based on the current directory the csv Files will be loaded from there.
```{r}
setDirectory("~/CS 470")
#testing
getwd()
```


This is the code to read all csv files into R. It will create a dataframe for each
csv file individually and title that dataframe the file's original name (removing spaces and the .csv). 
Originally in a function, but removed because the data would not load into  the global enviornment.
```{r}
path <- paste0(getwd(), "/")
files <- list.files(path=path, pattern="*.csv")
for(file in files)
{
  
  #filename before .csv
  csvFileName <- which(strsplit(file, "")[[1]]==".")
  assign(
    #remove spaces from file
    gsub(" ","",substr(file, 1, csvFileName-1)), 
    read.csv(paste(path,file,sep="")))
}
```

This function should return a proper list with all the data.frames as elements
```{r}
dfs <- Filter(function(x) is(x, "data.frame"), mget(ls()))
```

Find the name of the current data frame in the list and 
append it to the columns within that data frame. This is only altering the items in the list. The original data 
frame is still the same.
This way when the plots are saved you are able to identify the 
data frame they are of.
```{r}
dfNames <- names(dfs)
for(i in 1:length(dfs)){
  df.name <- dfNames[i]
  print(df.name)
  for(x in 1:length(colnames(dfs[[i]]))){}
  colnames(dfs[[i]])<-paste0(df.name,"_",colnames(dfs[[i]]), sep="")
  print(colnames(dfs[[i]]))
}


```


Will plot the total amount (count) of each variable within the selected data frame.
```{r}
plotHistFunc <- function(x, na.rm = TRUE, ...) {
  #need to install ggplot2
  library(ggplot2)
  nm <- names(x)
  for (i in seq_along(nm)) {
    histoplots <-ggplot(x,aes_string(x = nm[i])) + geom_histogram(alpha = .5,fill = "dodgerblue")
    
    ggsave(histoplots,filename=paste0(nm[i],"_Histogram",".jpg",sep=""))
  }
}
```


Goes into a specific row within a column. 
```{r}
compareFunction <- function(x){
  #Need better variable identification
  for(columns in dfs){
    xLabel <- names(columns)
    xVariable <- columns
    for(x in columns){
      yLabel <- names(columns)
      yVariable <- x
       title <- paste0("Comparing Data within each Column", "_", df.name)
  
    #Will only save the last graph output. Commented out.
    #jpeg(paste("ColumnComparison_", yLabel,".jpeg",sep=""))
        plot(xVariable, yVariable,col='blue', 
           main = title)
   # dev.off()
    }
  }
}
```


Plot Generic. Designed for a quick look at numberic data frames.
Intended for data frames with numeric columns. 
Plots each Data Frames columns.
```{r}
plotFunction <- function(x){
  jpeg(paste("ColumnPlot","_",df.name,".jpg",sep=""))
  plot(x, main = "Generic Plot of Columns in Data Frame")
  dev.off()
}
```

Correlation Corrgram.
Correlograms help us visualize the data in correlation matrices.
x is a data frame with one observation per row.
order=TRUE will cause the variables to be ordered using principal component analysis of the correlation matrix.
panel= refers to the off-diagonal panels. You can use lower.panel= and upper.panel= to choose different options 
below and above the main diagonal respectively. text.panel= and diag.panel= refer to the main diagnonal.
panel.pie (the filled portion of the pie indicates the magnitude of the correlation)
panel.shade (the depth of the shading indicates the magnitude of the correlation)
```{r}
plotCorrelation <- function(x){
  #install.packages("corrgram")
  library(corrgram)
  r <- cor(x)
  jpeg(paste("CorrelationPlot_",df.name,".jpg",sep=""))
  corrgram(r, order = TRUE, lower.panel=panel.shade,
           upper.panel = panel.pie,text.panel=panel.txt,
           main = "Plotting Correlation")
  dev.off()
}
```

Plotting time series objects
```{r}
plotTSData <- function(x){
  jpeg(paste("TimeSeriesPlot_",df.name,".jpg",sep=""))
  plot.ts(x, main="Time Series Plot")
  dev.off()
}
```


Call functions and applying dfs (list of data frames) to those functions
```{r}
lapply(dfs, plotHistFunc)
lapply(dfs, compareFunction) 
lapply(dfs, plotFunction)
lapply(dfs, plotCorrelation)
lapply(dfs, plotTSData)

```

